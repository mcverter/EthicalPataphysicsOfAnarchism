########################################
#
#
#
#   Package EtymologyDatabaseHandle
#
#
#
#######################################

package EtymologyDatabaseHandle ;

use strict;
use DatabaseHandle;

BEGIN {
    use Exporter   ();
    use vars       qw(@ISA @EXPORT @EXPORT_OK %EXPORT_TAGS);
    
    @ISA         = qw(Exporter DatabaseHandle);
    @EXPORT      = qw(&dbInsertWord);
}
use vars      @EXPORT_OK;



####################################
#
#  METHOD: new  
#  PRECONDITIONS: 
#  POSTCONDITIONS:  
#  SUMMARY:  creates a new object that passes etymology-specific
#              directives to an etymological dictionary
#  VARIABLES
#
###################################
sub new
{
#DATABASE

    my $class = shift;
    my $self = $class->SUPER::new
	('DBI:mysql:dbRadicalEmpiricism', undef ,undef );
    bless ($self, $class);
}

####################################
#
#  METHOD:  updateOnlineEtymology
#  PRECONDITIONS: 
#  POSTCONDITIONS:
#
#  VARIABLES
#
###################################

####################################
#
#  METHOD:  updateMWEtymology
#  PRECONDITIONS: 
#  POSTCONDITIONS:
#
#  VARIABLES
#
###################################

sub updateMWEtymology
{
    my $self = shift;
    my $cognate = shift;
    my $MWtym = shift;

    $self->dbInsertLookupValue ( 'tlkpMWEtymology',  
			      'tblWord',         
			      'Etymology',
			      'MWEtymology',		   
			      'EnglishCognate',
			      $cognate,
			      $MWtym);

}

sub updateOnlineEtymology
{
    my $self = shift;
    my $cognate = shift;
    my $oetym = shift;

    $self->dbInsertLookupValue ( 
				 'tlkpEtymology',  
				 'tblWord',         
				 'Etymology',
			      'OnlineEtymology',		   
			      'EnglishCognate',
			      $cognate,
			      $oetym);

}

####################################
#
#  METHOD:  getWordData
#  PRECONDITIONS: 
#  POSTCONDITIONS:
#
#  VARIABLES
#
###################################
sub getWordData
{
    print "\n###########################\nGETWORDDATA\n#################\n";
    my $self = shift;
    my $inputWord = shift;

    $self->selectItemsFromTable ("tblWord", "FrenchWord, EnglishCognate,Etymology",
				 "FrenchWord = \'$inputWord\'");

}

sub getAllMWEtymologies 
{
    my $self = shift;
    my $sth = $self->selectItemsFromTable ("tlkpMWEtymology", 
				 "MWEtymologyID, MWEtymologyValue");
    
}
####################################
#
#  METHOD:  getAllCognates
#  PRECONDITIONS: 
#  POSTCONDITIONS:
#
#  VARIABLES
#
#####################################

sub getAllCognates
{

    my $self = shift; 
    my $sth = $self->selectItemsFromTable ("tblWord" , "EnglishCognate",
				 "EnglishCognate NOT IN (\'NO_COGNATE\', \'NO_TRANSLATION\')");

}

####################################
#
#  METHOD:  getAllWords
#  PRECONDITIONS: 
#  POSTCONDITIONS:
#
#  VARIABLES
#
###################################

sub getAllWords
{
    my $self = shift;
    my $sth = $self->selectItemsFromTable ("tblWord", "FrenchWord");
}


####################################
#
#  METHOD:  getAllTranslatedWords
#  PRECONDITIONS: 
#  POSTCONDITIONS:
#
#  VARIABLES
#
###################################
sub getAllTranslatedWords
{
    my $self = shift;

    my $sth = $self->selectItemsFromTable ("tblWord" , "EnglishCognate",
				 "EnglishCognate NOT IN (\'NO_COGNATE\', \'NO_TRANSLATION\')");
}

####################################
#
#  METHOD:  getAllRoots
#  PRECONDITIONS: 
#  POSTCONDITIONS:
#
#  VARIABLES
#
###################################

sub getAllRoots
{
}

####################################
#
#  METHOD:  dbGetIndexAndInsertWord
#  PRECONDITIONS: 
#  POSTCONDITIONS:
#
#  VARIABLES
#
###################################

sub dbGetIndex
{
    my ($self, $frenchWord) = @_;


    return $self->getIndexOrInsert ("tblWord", "WordID", 
				     "Word", $frenchWord, 
			     "null, \'$frenchWord\', \'Fr\',null,null,null,null,null,null");
}

####################################
#
#  METHOD:  addXtoY
#  PRECONDITIONS: 
#  POSTCONDITIONS:
#
#  VARIABLES
#
###################################

sub addLanguageToWord 
{
    my $self = shift;
    my $wordID = shift;
    my $language = shift;
    
    $self->updateTableSetFieldValueWhere ("tblWord", "Language", 
					  $language, " wordID = $wordID");
}

sub addCognateToWord
{
    my $self = shift;
    my $wordID = shift;
    my $cognate = shift;

    $self->updateTableSetFieldValueWhere ("tblWord", "EnglishCognate", 
					  $cognate, " wordID = $wordID");
}

sub addEtymologyToWord
{
    my $self = shift;
    my $wordID = shift;
    my $etymology = shift;
    my $dictionaryID = shift;
    $self->insertLookupID ("tblWord", "Etymology", $etymology,
			   " wordID = $wordID");
 }
sub addWordTypeToWord
{
    my $self = shift;
    my $wordID = shift;
    my $wordType = shift;

    $self->updateTableSetFieldValueWhere ("tblWord", "wordType", 
					  $wordType, " wordID = $wordID");
}
sub addFrequencyToWord
{
    my $self = shift;
    my $wordID = shift;
    my $frequency = shift;
    
    $self->updateTableSetFieldValueWhere ("tblWord", "Frequency",
					  $frequency, " wordID = $wordID");
}
####################################
#
#  METHOD:  dbInsertWordType
#  PRECONDITIONS: 
#  POSTCONDITIONS:
#
#  VARIABLES
#
###################################

sub dbInsertWordType
{
    my ($self, $wordTypeID, $partOfSpeech, $gender, $declension,  
	$tense, $person) = @_;
    
    my $sth = insertValuesIntoTable("tblWordType",  
				    "NULL, \'$partOfSpeech\', \'$gender\', \'$declension\', \'NULL\', \'NULL\'");
}

####################################
#
#  METHOD:  dbInsertRadical 
#  PRECONDITIONS: 
#  POSTCONDITIONS:
#
#  VARIABLES
#
###################################

sub dbInsertRadical 
{
    my ($self, $radicalID, $radicalWord, $language, $meaning) = @_;

    my $sth = insertValuesIntoTable("tblRadical",  
				    "NULL, \'$radicalWord\', \'$language\', \'$meaning\'");
} 

####################################
#
#  METHOD:  getRootIndex
#  PRECONDITIONS: 
#  POSTCONDITIONS:
#
#  VARIABLES
#
###################################
sub addRadical
{
    my $self = shift;
    my $radical = shift;
    my $etymologyCode = shift;
    my $source = shift;
    
    my $radicalCode = $self->getIndexOrInsert ("tblRadical", "RadicalID", 
						"RadicalWord", $radical, 
						"null, \'$radical\', null, null");
    $self->addRadicalEtymologyRelation($radicalCode, $etymologyCode, $source);
}

sub addRadicalEtymologyRelation 
{
    my $self = shift;
    my $radicalCode = shift;
    my $etymologyCode = shift;
    my $source = shift;

    $self->insertValuesIntoTable ("trelEtymologyRadical", 
				  "$radicalCode, $etymologyCode, \'$source\'");
}

sub addMoreAt
{
    my $self = shift;
    my $etymologyCode = shift;
    my $moreAtWord = shift;
    my $moreAtEtym = shift;
#    my $mwDic$moreAtPath;
    my $moreCode = $self->getIndexOrInsert ("tblMoreAt", "MoreAtID", 
						"RootWord", $moreAtWord, 
						"null, \'$moreAtWord\', \'moreAtEtym\', null");
    $self->addRadicalToEtymology($radicalCode, $etymologyCode); 
}


####################################
#
#  METHOD:  getRootIndex
#  PRECONDITIONS: 
#  POSTCONDITIONS:
#
#  VARIABLES
#
###################################

sub getRootIndex
{
    my $self = shift;
    my $root = shift;
    my $allValues = "\\N, \'$root\', \\N, \\N";

    my $rootIndex = $self->getIndexOrInsert 
	("tblRadical", "RadicalID", $allValues; 
	 "RadicalID = \'$root\'"), 

    return $rootIndex;
       
}






END { }       # module clean-up code here (global destructor)


1;

#+-------------------------------+
# Tables_in_dbradicalempiricism #
#+-------------------------------+
# tblmoreat                     # 
# tblradical                    # 
# tblword                       # 
# tblwordtype                   # 
# tlkpbook                      # 
# tlkpdictionary                # 
# tlkpetymology                 # 
# tlkplanguage                  # 
# tlkpmwetymology               # 
# trelfrequency                 # 
# trelradicalsubradical         # 
# trelwordradical               # 
#+-------------------------------+

