use WebCrawl;
use strict;
use EtymologyDatabaseHandle;
use FileHandle;






my     (
#TABLES
	$tblRadical = "tblRadical",                   
	$tblWord = "tblWord",
	$tblWordType = "tblWordType",

#LOOKUP TABLES
	$tlkpBook = "tlkpBook",
	$tlkpOnlineEtymology = "tlkpOnlineEtymology",
	$tlkpdictionary = "tlkpDictionary",
	$tlkpLanguage = "tlkpLanguage", 
	$tlkpMWetymology = "tlkpMWetymology", 

#RELATION TABLES
	$trelFrequency = "trelFrequency",
	$trelRadicalSubradical = "trelRadicalSubradical", 
	$trelWordRadical = "trelWordRadical",
 );

my $eDBh = new EtymologyDatabaseHandle();
my $etymonline = "http://www.etymonline.com";
my $mwDic = "http://www.m-w.com";

my $INwordFileName = "FrOutput1.txt";

#################################
#
#   METHOD: populateDatabaseFromWordFile
#   PRECONDITIONS:
#   POSTCONDITIONS: 
#   SUMMARY: 
#
#   VARIABLES:
# 
##################################
sub populateDatabaseFromFile 
{



}


#################################
#
#   METHOD: 
#   PRECONDITIONS:
#   POSTCONDITIONS: 
#   SUMMARY: 
#
#   VARIABLES:
# 
##################################
sub parseMWEtymology 
{
    
    my $allCognates = $eDBh->getAllCognates();

    
    my $etymologyInput = "Middle English, from Middle French, from Latin <i>absent-, absens, </i>present participle of <i>abesse </i>to be absent, from <i>ab- + esse </i>to be -- more at <a href=/dictionary/is><font size=-1>IS</font></a><br>";
    
    ####################################
    #insert root into root radical table
    #make connection between radical and etymology
    ###################################

    
    while ($etymologyInput =~ m|<i>(.*?)</i>|g)
    {
	my $rad = $1;
	$rad =~ tr/ //d;
	my @radicals = split /(,|\+)/, $rad;
	foreach my $root (@radicals)
	{
	    if (($root) && $root !~ /(,|\+)/)
	    {
		print "Root is $root\n";
	    }
	}
    }
    
    ###################
    #
    #   check for MoreAt
    #
    ###################

    if ($etymologyInput =~ m|<a href=(.*?)>(.*)|)
    {
	my $moreAtPath = $1;
	my $remainder = $2;
	$remainder =~ /size=-1>(.*?)</;
	my $moreAtWord = $1;
	my $content = WebCrawl::getWebsiteContent("$mwDic$moreAtPath");
#	print $content;
	$content =~ /(Etymology.*?<br>)/;
	my $moreAsEtym = $1;
	print "\npath is $moreAtPath and word is $moreAtWord\n\n$moreAsEtym";
	
    }
}


#################################
#
#   METHOD: getMWEtymologyFromFile
#   PRECONDITIONS:
#   POSTCONDITIONS: 
#   SUMMARY: 
#
#   VARIABLES:
# 
##################################

sub parseOnlineEtymology 
{
    my $etymologyInput = shift;
    
    while ($etymologyInput =~ m|<span class="foreign">(.*?)</span>|g)
    {
	my $rad = $1;
    }
    
    ###################
    #
    #   check for MoreAt
    #
    ###################

    if ($etymologyInput =~ m|<a href=\"(.*?)\".*?>(.*?)</a>|)
    {
	my $moreAtPath = $1;
	my $remainder = $2;
	my $content = WebCrawl::getWebsiteContent("$etymonline$moreAtPath");
	$content =~ /(<dd.*?dd>)/s;
	my $moreAsEtym = $1;
	print "\npath is $moreAtPath and word is $remainder\n\n$moreAsEtym";
	
    }
}

;


#################################
#
#   METHOD: getMWEtymologyFromFile
#   PRECONDITIONS:
#   POSTCONDITIONS: 
#   SUMMARY: 
#
#   VARIABLES:
# 
##################################
sub getAllOnlineEtymologies
{
    my $eDBh;
    my $allWordRef = $eDBh->getAllTranslatedCognates;
    my ($word, $onlineEtymology);
    foreach $word (@$allWordRef)
    {
	$onlineEtymology = getOnlineEtymologyFromWeb($word);
    }
    $eDBh->updateOnlineEtymology($word, $onlineEtymology);
}

#################################
#
#   METHOD:  getOnlineEtymologicalDefinitions
#   PRECONDITIONS:
#   POSTCONDITIONS: 
#   SUMMARY:  
#                
#
#   VARIABLES:
# 
##################################
sub getOnlineEtymologyFromWeb
{
    my $word = shift;    
    $word =~ tr/ //d;
    my $output = WebCrawl::getWebsiteContent 
	("http://www.etymonline.com/index.php?search=$word&searchmode=none");
    if ($output =~ /<dt class="highlight"><a href="\/index.php\?term=$word">$word.*?(<dd.*?dd>)/s)
	
    {
	my $onlineEtymology =  $1;
	$onlineEtymology =~ tr/'//d;
        return $onlineEtymology;
    }
}


#################################
#
#   METHOD: getMWEtymologyFromFile
#   PRECONDITIONS:
#   POSTCONDITIONS: 
#   SUMMARY: 
#
#   VARIABLES:
# 
##################################
sub getFieldFromLine
{
    my $line = shift;
    my $field = shift;

    my @fields = split /\t/, $line;
    if ($field =~ /frenchWord/) {return removeQuote($fields[1]);}
    if ($field =~ /language/) {return removeQuote($fields[2]);}
    if ($field =~ /cognate/) {return removeQuote($fields[3]);}
    if ($field =~ /mwEtymology/) {return removeQuote($fields[4]);}
}

sub removeQuote
{
    my $word = shift;
    $word =~ tr/'//d;
   return $word;
}


#############################################
#
#
#
#
#     
#
#
#
#
#############################################

sub analyzeWordFile
{
# IN FILE
    my $filename = "FrOutput1.txt";
    my $IN = new FileHandle;
    $IN->open ($filename) or die "Could not open INFILE $filename";

    while (my $line = <$IN>)
    {
	my @fields = split /\t/, $line;
	my $frenchWord = $fields[1];
	my $englishCognate = $fields[2];
	my $etymology = $fields[3];
    }


    my $OTB_EngWords = "OTB_WordIndex.txt";
    my $hanselFrWords = "remainingWords";
    my $frenchEtyOutput = "frenchEtymologyOutput.txt";
    my $EngDic = "http://www.m-w.com/dictionary/";
    my $EngEtymDic = "http://www.etymonline.com/index.php?searchmode=none&search=";
    my $TransDic = "http://www.wordreference.com/fren/";
    my $IN = new FileHandle;
    $IN->open ($hanselFrWords) or die "Could not open INFILE $hanselFrWords";
#$OUT->open( "$frenchEtyOutput", ">>") or die "Could not open OUTFILE $frenchEtyOutput";

    my $line;
    my @terms;

    my $continueWord = 'reposant';
    my $robotCounter;
    my $continueAnalysis = 0;

    while ($line = <$IN>)
{
    my $word = $line;
    chop $word;
    
    $word =~ s/\s//g;
    if ($word eq $continueWord)
    {
	$continueAnalysis = 1;
    }
    $continueAnalysis = 1;
    if ($word && $continueAnalysis)
    {
#	    print $word, "\n";
	    my $term = new Term;
	    $term->setFrenchTerm ($word);
	    my $englishCognate = findEnglishCognate($word);
#	    print "COGNATE is $englishCognate \n";
	    $term->setEnglishTerm ($englishCognate);
	    if (($englishCognate ne "NO_COGNATE") &&
		($englishCognate ne "NO_TRANSLATION"))
	    {
		my $englishEtym = findEngEtym($englishCognate);
		$term ->setEnglishEtymology ($englishEtym);
		$term->print();
	    }
	    else 
	    {
		$term -> print ();
	    }
	}
}
}




#########################################################
#
#  LWP FUNCTION
#
#
#########################################################

sub getWebsiteContent
{
    my $website = shift;
    
    my $headers = new HTTP::Headers(Accept => 'text/plain');
    my $req = new HTTP::Request("GET", $website, $headers);
    
    my $robotCounter++;
    my $ua;
    my $robot_ua;
    my $resp;
    
    if ($robotCounter % 20 != 0)
    {
	$ua = new LWP::UserAgent;
	$resp = $ua->request($req);
    }
    else 
    {
	$robot_ua =  LWP::RobotUA->new 
	    ('mitchbot', 'longditude@yahoo.com');
	$robot_ua->delay (7 / 60);
	if ($robotCounter % 11)
	{
	    $robot_ua->delay (60 / 60);
	}
	if ($robotCounter % 13)
	{
	       $robot_ua->delay (120 / 60);
	}
	$resp = $robot_ua->request($req);
    }

    
    my $content;

    if (! $resp->is_success)
    {
	my $message = $resp->message;
	
	print "Response failed: $message.  Robot Counter is $robotCounter." ;
	sleep 60;
	my $newContent = getWebsiteContent ($website);
	return $newContent;
    }
    else 
    {
	$content = $resp->as_string;
	return $content;
    }
}




#################################
#
#   METHOD: getMWEtymologyFromFile
#   PRECONDITIONS:
#   POSTCONDITIONS: 
#   SUMMARY: 
#
#   VARIABLES:
# 
##################################

sub getAllMWEtymologyFromFile
{
    my $eDBh = new EtymologyDatabaseHandle();


    my $filename = "..\\DBScripts\\WordDataFile2.txt";
    my $IN = new FileHandle;
    $IN->open ($filename) or die "Could not open INFILE $filename";

    while (my $line = <$IN>)
    {
	my $cognate = getCognateFromLine($line);
	my $mwEtymology = getMWEtymologyFromLine($line);
	$eDBh->updateMWEtymology($cognate, $mwEtymology);
    }
}
