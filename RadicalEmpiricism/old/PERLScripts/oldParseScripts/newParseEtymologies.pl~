#!C:\bin\perl

use strict;
use Carp;
use LWP;
use LWP::RobotUA;
use FileHandle;
#use lib  "C:/Documents and Settings/tech/My Documents/AnarchismOfTheOtherMan/EtymologicalEmpiricism";
use DBI;
######################
#
#
#  main 
#
#
######################


my $DEBUG = 1;

#DATABASE

my $dbh;
my $sth;
my $query;

$dbh = DBI->connect ('DBI:mysql:dbRadical_Empiricism',undef ,undef ,{RaiseError =>1});

$sth = $dbh->prepare("SHOW TABLES");
$sth->execute();
while (my @row = $sth->fetchrow_array())
{
    print join ("\t", @row), "\n";

}
$sth->finish();

# IN FILE
my $filename = "FrOutput1.txt";
my $IN = new FileHandle;
$IN->open ($filename) or die "Could not open INFILE $filename";

while (my $line = <$IN>)
{
    my @fields = split /\t/, $line;
    my $frenchWord = $fields[1];
    my $englishCognate = $fields[2];
    my $etymology = $fields[3];
    if ($etymology)
	{
if ($DEBUG)
{
	    print "\nLine 113\nETYMOLOGY  IS $etymology\n";
}    
	    
            my @roots = split /<\/i>/, $etymology;
	    my $baseRoot = $roots[0];
#            $baseRoot =~ /.*?([A-Z].*?) <i>(.*)/;
#	    my $language = $1;
#	    my $meaning = $2;
#            $baseRoot = new Radical ($language, $meaning);

if ($DEBUG)
{
	    print "\nLine 120\nROOT is $baseRoot\n";
}
	    my $rootNum = @roots;
	    $etymology = new Etymology ($frenchWord, $englishCognate, $etymology, $baseRoot);

	    for (my $j = 0;  $j < @roots ; $j++)
	    {
		if (($roots[$j+1]) &&
		    ($roots[$j+1] !~ /\b[A-Z]/))
		{
		    $roots[$j] .= $roots [$j+1];
		    splice @roots, $j+1, 1;
		    $j--;
		}
	    }

	    if ($roots[@roots-1] =~  /more/)
	    {
		my $moreLine = $roots[@roots-1]; 
		$moreLine =~ /(.*)(more.*)/;
		$roots[@roots-2] .= $1;
		my $moreAt = $2;
if ($DEBUG)
{
		print "\nLine 144\nMore at is $moreAt\n";
}

		$moreAt = new MoreAt($moreAt);
if ($DEBUG)
{
		print "\nLine150\nMOREAT is LINE ", $moreAt->{_moreLine}, " and HREF ", $moreAt->{_href}, "\n";
}
		pop @roots;

		
		$etymology->addMoreAt($moreAt);

	    }

	    for (my $i = 0; $i < @roots; $i++)
		{
if ($DEBUG)
{
		    print "Line 163\nRoot NUMBER $i is $roots[$i]. ";
}
		    my $radical = $roots[$i];
###########
#
# DEBUG CODE
#
###########
		    if ($radical =~ /abonder/)
		    {
			1;
		    }

###########
#
# DEBUG CODE
#
###########
		    $radical =~ /.*?([A-Z].*?) <i>(.*)/;
		    my $language = $1;
		    my $meaning = $2;
		    my $root = new Radical ($language, $meaning);
if ($DEBUG)
{
		    print "\nLine 187\nRoot RADICAL has LANGUAGE " , $root->{_sourceLanguage}, " and MEANING ", $root->{_meaning}, "\n";
}

		    $etymology->addRadical($root);
		}

	    $etymology->print();
	    print "\n";
	}
}

1;


########################################
#
#
# package Etymology
#
#
########################################
package Etymology;

sub new {
    my $class = shift;
    my $self = {
	_frenchWord => shift,
	_englishCognate => shift,
	_etymology => shift,
	_baseRoot => shift,
	_moreAt => undef,
	_radicals => [],
    };
    bless $self, $class;
    return $self;
}


#
#
# package MoreAt
#
#
########################################
package MoreAt;

sub new {
    my $class = shift;
    my $moreLine = shift;
    my $hrefIndex = index $moreLine, "href";
    $hrefIndex +=6;

    $moreLine = substr ($moreLine, 0, $hrefIndex) .  "http://www.m-w.com" . substr ($moreLine,  $hrefIndex) ;

    $moreLine =~ /href="(.*?)"/;
    my $href = $1;

    my $self;
    my $self = {
	_moreLine => $moreLine,
	_href => $href,
    };
    bless $self, $class;
    return $self;
}

1;

 ########################################
 #
 #
 # package Radical
 #
 #
 ########################################

package Radical;

sub new {
    my $class = shift;
    my $self = {
	_sourceLanguage => shift,
	_meaning => shift,
    };
    bless $self, $class;
    return $self;
}

sub print {
    my $self = shift;
    my $lang = $self-> {_sourceLanguage};
    my $mean = $self->{_meaning};
    print " RADICAL has LANGUAGE $lang and MEANING $mean\n"; 
}
 1;

#######################################
#
#
# package moreAt
#
#
########################################

package moreAt;

sub new {
    my $self = {
	_moreWord => undef,
	_definition => undef,
    };
    bless $self, 'MoreAt';
    return $self;
}

1;
